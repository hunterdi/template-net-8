version: "3.9"

services:
    postgres:
        image: postgres
        restart: unless-stopped
        environment:
            POSTGRES_PASSWORD: 12369
        ports:
            - 15432:5432
        volumes:
            - ./data/PostgreSQL:/var/lib/postgresql/data

    azurite:
        image: mcr.microsoft.com/azure-storage/azurite
        hostname: azurite
        restart: unless-stopped
        command: "azurite --loose --blobHost 127.0.0.1 --blobPort 10000 --queueHost 127.0.0.1 --queuePort 10001 --tableHost 127.0.0.1 --tablePort 10002 --location /workspace --debug /workspace/debug.log"
        ports:
            - 10000:10000
            - 10001:10001
            - 10002:10002
        volumes:
           - ./data/Storage:/workspace

    seq:
        image: datalust/seq:latest
        restart: unless-stopped
        ports:
          - '80:80'
          - '5341:5341'
        environment:
          ACCEPT_EULA: Y
          # SEQ_STORAGE_SECRETKEY: "MTIzNDU2Nzg5MDEyMzQ1Njc4OTAxMjM0NTY3ODkwMTI="
          # SEQ_FIRSTRUN_ADMINPASSWORDHASH: "MTIzNDU2Nzg5MDEyMzQ1Njc4OTAxMjM0NTY3ODkwMTI="

    zookeeper:
        # platform: linux/amd64
        image: confluentinc/cp-zookeeper:7.7.0
        container_name: zookeeper
        restart: unless-stopped
        ports:
            - 2181:2181
        environment:
            ZOOKEEPER_CLIENT_PORT: 2181
            ZOOKEEPER_TICK_TIME: 2000  
        healthcheck:
            test: echo srvr | nc zookeeper 2181 || exit 1
            # test: echo stat | nc localhost 2181
            interval: 10s
            timeout: 10s
            retries: 3
        logging:
            driver: "json-file"
            options:
                max-size: "1m"

    kafka-ui: 
        container_name: kafka-ui 
        image: provectuslabs/kafka-ui:latest
        ports:
            - 8080:8080
        depends_on:
            - broker-1
            - broker-2
            - broker-3
        environment:
            KAFKA_CLUSTERS_0_NAME: broker-1
            KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: broker-1:29091
            KAFKA_CLUSTERS_0_METRICS_PORT: 19101
            KAFKA_CLUSTERS_1_NAME: broker-2
            KAFKA_CLUSTERS_1_BOOTSTRAPSERVERS: broker-2:29092
            KAFKA_CLUSTERS_1_METRICS_PORT: 19102
            KAFKA_CLUSTERS_2_NAME: broker-3
            KAFKA_CLUSTERS_2_BOOTSTRAPSERVERS: broker-3:29093
            KAFKA_CLUSTERS_2_METRICS_PORT: 19103
            DYNAMIC_CONFIG_ENABLED: 'true'
        logging:
            driver: "json-file"
            options:
                max-size: "1m"

    broker-1:
        # platform: linux/amd64
        image: confluentinc/cp-kafka:7.7.0
        container_name: broker-1
        restart: unless-stopped
        ports:
            - 9091:9091
        depends_on:
            - zookeeper
        environment:
            KAFKA_BROKER_ID: 1
            KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
            KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT
            KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
            KAFKA_ADVERTISED_LISTENERS: INTERNAL://broker-1:29091,EXTERNAL://localhost:9091
            KAFKA_DEFAULT_REPLICATION_FACTOR: 3
            KAFKA_NUM_PARTITIONS: 3
            KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
            KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
            KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
            KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
            KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 100
        healthcheck:
            test: nc -vz localhost 9091
            interval: 10s
            timeout: 10s
            retries: 3
        logging:
            driver: "json-file"
            options:
                max-size: "1m"

    broker-2:
        # platform: linux/amd64
        image: confluentinc/cp-kafka:7.7.0
        container_name: broker-2
        restart: unless-stopped
        ports:
            - 9092:9092
        depends_on:
            - zookeeper
        environment:
            KAFKA_BROKER_ID: 2
            KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
            KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT
            KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
            KAFKA_ADVERTISED_LISTENERS: INTERNAL://broker-2:29092,EXTERNAL://localhost:9092
            KAFKA_DEFAULT_REPLICATION_FACTOR: 3
            KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
            KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
            KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
            KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
            KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 100
        healthcheck:
            test: nc -vz localhost 9092
            interval: 10s
            timeout: 10s
            retries: 3
        logging:
            driver: "json-file"
            options:
                max-size: "1m"

    broker-3:
        # platform: linux/amd64
        image: confluentinc/cp-kafka:7.7.0
        container_name: broker-3
        restart: unless-stopped
        ports:
            - 9093:9093
        depends_on:
            - zookeeper
        environment:
            KAFKA_BROKER_ID: 3
            KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
            KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT
            KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
            KAFKA_ADVERTISED_LISTENERS: INTERNAL://broker-3:29093,EXTERNAL://localhost:9093
            KAFKA_DEFAULT_REPLICATION_FACTOR: 3
            KAFKA_NUM_PARTITIONS: 3
            KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
            KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
            KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
            KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
            KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 100
        healthcheck:
            test: nc -vz localhost 9093
            interval: 10s
            timeout: 10s
            retries: 3
        logging:
            driver: "json-file"
            options:
                max-size: "1m"

    schema-registry:
        image: confluentinc/cp-schema-registry:7.7.0
        ports:
            - 8081:8081
        container_name: schema-registry
        depends_on:
            - broker-1
            - broker-2
            - broker-3
        environment:
            SCHEMA_REGISTRY_HOST_NAME: schema-registry
            SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: PLAINTEXT://broker-1:29091
            SCHEMA_REGISTRY_CUB_KAFKA_TIMEOUT: 300

    ksqldb-server:
        image: confluentinc/ksqldb-server:0.29.0
        hostname: ksqldb
        container_name: ksqldb
        depends_on:
            - broker-1
            - broker-2
            - broker-3
        ports:
            - 8088:8088
        environment:
            KSQL_LISTENERS: http://0.0.0.0:8088
            KSQL_BOOTSTRAP_SERVERS: broker-1:29091
            KSQL_KSQL_LOGGING_PROCESSING_STREAM_AUTO_CREATE: 'true'
            KSQL_KSQL_LOGGING_PROCESSING_TOPIC_AUTO_CREATE: 'true'
            KSQL_KSQL_SCHEMA_REGISTRY_URL: http://schema-registry:8081
            KSQL_KSQL_SERVICE_ID: confluent_rmoff_01
            KSQL_KSQL_HIDDEN_TOPICS: ^_.*
            KSQL_KSQL_CONNECT_WORKER_CONFIG: /connect/connect.properties
            KSQL_CONNECT_BOOTSTRAP_SERVERS: broker-1:29091
            KSQL_CONNECT_REST_ADVERTISED_HOST_NAME: ksqldb
            KSQL_CONNECT_GROUP_ID: ksqldb-kafka-connect-group-01
            KSQL_CONNECT_CONFIG_STORAGE_TOPIC: _ksqldb-kafka-connect-group-01-configs
            KSQL_CONNECT_OFFSET_STORAGE_TOPIC: _ksqldb-kafka-connect-group-01-offsets
            KSQL_CONNECT_STATUS_STORAGE_TOPIC: _ksqldb-kafka-connect-group-01-status
            KSQL_CONNECT_KEY_CONVERTER: org.apache.kafka.connect.converters.IntegerConverter
            KSQL_CONNECT_VALUE_CONVERTER: io.confluent.connect.avro.AvroConverter
            KSQL_CONNECT_VALUE_CONVERTER_SCHEMA_REGISTRY_URL: http://schema-registry:8081
            KSQL_CONNECT_CONFIG_STORAGE_REPLICATION_FACTOR: '1'
            KSQL_CONNECT_OFFSET_STORAGE_REPLICATION_FACTOR: '1'
            KSQL_CONNECT_STATUS_STORAGE_REPLICATION_FACTOR: '1'
            KSQL_CONNECT_LOG4J_APPENDER_STDOUT_LAYOUT_CONVERSIONPATTERN: '[%d] %p %X{connector.context}%m (%c:%L)%n'
            KSQL_CONNECT_PLUGIN_PATH: /usr/share/java,/data/connect-jars
        command:
            - bash
            - -lc
            - "echo \"Installing connector plugins\"\nconfluent-hub install --no-prompt --component-dir
              /usr/share/java/ confluentinc/kafka-connect-datagen:0.6.0\n#\necho \"Launching
              ksqlDB\"\n/usr/bin/docker/run & \n#\nsleep infinity\n"

    ksqldb-cli:
        image: confluentinc/ksqldb-cli:0.28.2
        container_name: ksqldb-cli
        depends_on:
            - broker-1
            - broker-2
            - broker-3
            - ksqldb-server
        entrypoint: /bin/sh
        tty: true
        environment:
            KSQL_CONFIG_DIR: /etc/ksql